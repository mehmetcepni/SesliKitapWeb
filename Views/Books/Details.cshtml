@using Microsoft.AspNetCore.Identity
@model SesliKitapWeb.Models.Book
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = Model.Title;
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-4">
            <img src="@Model.CoverImageUrl" class="img-fluid rounded" alt="@Model.Title">
            @if (User.Identity?.IsAuthenticated == true)
            {
                <div class="mt-3">
                    <form asp-action="ToggleFavorite" method="post" class="d-inline">
                        <input type="hidden" name="bookId" value="@Model.Id" />
                        <button type="submit" class="btn @(Model.UserBooks.Any(ub => ub.IsFavorite) ? "btn-warning" : "btn-outline-warning")">
                            <i class="bi bi-star-fill"></i> Favorilerime Ekle
                        </button>
                    </form>
                </div>
            }
        </div>
        <div class="col-md-8">
            <h1>@Model.Title</h1>
            <h4 class="text-muted">@Model.Author</h4>
            <dt class="col-sm-4">Kategori</dt>
            <dd class="col-sm-8">@Model.Category</dd>
            <p>@Model.Description</p>
            
            @if (!string.IsNullOrEmpty(Model.PdfFileUrl))
            {
                <a href="@Model.PdfFileUrl" class="btn btn-primary" target="_blank">
                    <i class="bi bi-file-pdf"></i> PDF'i İndir
                </a>
            }

            @if (User.IsInRole("Admin"))
            {
                <div class="mt-3">
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">Düzenle</a>
                    <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">Sil</a>
                </div>
            }
        </div>
    </div>

    <div class="mt-5">
        <h3>Yorumlar</h3>
        @if (User.Identity?.IsAuthenticated == true)
        {
            <form asp-controller="Books" asp-action="AddReview" method="post" class="mb-4">
                <input type="hidden" name="bookId" value="@Model.Id" />
                <div class="form-group">
                    <textarea name="content" class="form-control" rows="3" placeholder="Yorumunuzu yazın..."></textarea>
                </div>
                <button type="submit" class="btn btn-primary mt-2">Yorum Yap</button>
            </form>
        }

        @if (Model.Reviews.Any())
        {
            foreach (var review in Model.Reviews.OrderByDescending(r => r.CreatedAt))
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <h6 class="card-subtitle mb-2 text-muted">@review.User?.UserName</h6>
                            <small class="text-muted">@review.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                        </div>
                        <p class="card-text">@review.Content</p>
                        @if (User.IsInRole("Admin") || review.UserId == User.Identity?.Name)
                        {
                            <form asp-controller="Reviews" asp-action="Delete" method="post" class="d-inline">
                                <input type="hidden" name="id" value="@review.Id" />
                                <button type="submit" class="btn btn-sm btn-danger">Sil</button>
                            </form>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <p class="text-muted">Henüz yorum yapılmamış.</p>
        }
    </div>
</div>

@section Scripts {
    <script>
        const synth = window.speechSynthesis;
        let utterance;

        document.getElementById('playButton').addEventListener('click', () => {
            if (synth.speaking) synth.cancel();

            const text = document.getElementById('bookContent').innerText;
            utterance = new SpeechSynthesisUtterance(text);
            utterance.rate = parseFloat(document.getElementById('rateControl').value);
            utterance.lang = 'tr-TR';

            synth.speak(utterance);
            document.getElementById('pauseButton').disabled = false;
            document.getElementById('resumeButton').disabled = true;
        });

        document.getElementById('pauseButton').addEventListener('click', () => {
            if (synth.speaking && !synth.paused) {
                synth.pause();
                document.getElementById('resumeButton').disabled = false;
            }
        });

        document.getElementById('resumeButton').addEventListener('click', () => {
            if (synth.paused) {
                synth.resume();
                document.getElementById('resumeButton').disabled = true;
            }
        });

        document.getElementById('rateControl').addEventListener('change', () => {
            if (synth.speaking) {
                synth.cancel();
                document.getElementById('playButton').click();
            }
        });

        function readTextAloud(text) {
            const speech = new SpeechSynthesisUtterance(text);
            speech.lang = 'en-US'; // Dili ayarlayın
            window.speechSynthesis.speak(speech);
        }

        async function fetchAndReadPdfText(pdfPath) {
            const response = await fetch(pdfPath);
            const blob = await response.blob();

            const reader = new FileReader();
            reader.onload = function () {
                const text = reader.result;
                readTextAloud(text);
            };

            reader.readAsText(blob);
        }
    </script>
}